@page "/docs/{path?}"
@inherits AppComponentBase
@inject HttpClient Http
@inject IJSRuntime JS
@using Markdig
@using Markdig.Syntax

@if (render.Response?.Preview != null)
{
    <div class="prose lg:prose-xl min-vh-100 m-3">
        <div class="markdown-body">
            @((MarkupString)render.Response!.Preview)
        </div>
    </div>

    <div class="my-5 flex justify-center">
        <SrcLink href=@($"https://github.com/NetCoreTemplates/blazor-wasm/blob/master/MyApp.Client/wwwroot/content/{render.Response!.FileName}") IconClass="oi oi-document" />
        <SrcLink href="https://github.com/NetCoreTemplates/blazor-wasm/blob/master/MyApp.Client/Pages/Docs.razor" IconSrc="/img/blazor.svg" />
    </div>
}
else if (render.Error == null && !isPagePrerendered)
{
    <div>Loading...</div>
}

<ErrorSummary Status=@render.Error />

@code {
    [Parameter]
    public string? Path { get; set; }

    ApiResult<MarkdownFileInfo> render { get; set; } = new();

    bool isPagePrerendered { get; set; } = false;

    string lastPathPath = "";

    async Task loadDoc()
    {
        if (lastPathPath != "" && lastPathPath == Path)
            return;
        lastPathPath = Path;
        try
        {
            isPagePrerendered = await (JS.InvokeAsync<bool>("isPagePrerendered"));
        }
        catch (JSException e)
        {
            // ignore, tag function is missing, render at runtime.
        }

        if(!isPagePrerendered)
            render = await MarkdownUtils.LoadDocumentAsync(Path!, doc => Http.GetStringAsync($"/content/{doc.FileName}"));
    }

    protected override async Task OnParametersSetAsync()
    {
        await loadDoc();
    }

    protected override async Task OnInitializedAsync()
    {
        await loadDoc();
    }

}
