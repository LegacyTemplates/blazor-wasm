@inherits AppComponentBase

<form @onsubmit="_ => OnSubmit()" @onsubmit:preventDefault class=@CssUtils.ClassNames("relative shadow rounded p-4", @class)>
<CascadingValue Value=@apiResult.ErrorStatus>
    <button type="button" class="close" @onclick="close"><i></i></button>

    <h1 class="fs-4 text-secondary text-center">
        New Booking
    </h1>

    <ErrorSummary VisibleFields=@(new[]{ 
        nameof(request.Name), nameof(request.RoomType), nameof(request.RoomNumber), nameof(request.BookingStartDate), 
        nameof(request.BookingEndDate), nameof(request.Cost), nameof(request.Notes),
    }) />

    <div class="mb-3 form-floating">
        <TextInput @bind-Value="request.Name" required placeholder="Name for this booking" />
    </div>

    <div class="mb-3 form-floating">
        <SelectInput @bind-Value="request.RoomType" Options=@(Enum.GetValues<RoomType>()) /> 
    </div>

    <div class="mb-3 form-floating">
        <TextInput type="number" @bind-Value="request.RoomNumber" min="0" required />
    </div>

    <div class="mb-3 form-floating">
        <DateTimeInput @bind-Value="request.BookingStartDate" required />
    </div>

    <div class="mb-3 form-floating">
        <DateTimeInput @bind-Value="request.BookingEndDate" />
    </div>

    <div class="mb-3 form-floating">
        <TextInput type="number" @bind-Value="request.Cost" min="0" required />
    </div>
    
    <div class="mb-3 form-floating">
        <TextAreaInput @bind-Value="request.Notes" placeholder="Notes about this booking" style="height:6rem" />
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <div class="d-flex-fill">
            <SrcLink href="https://github.com/NetCoreTemplates/blazor-wasm/blob/master/MyApp.Client/Pages/BookingsCrud/Create.razor" 
                     IconSrc="/img/blazor.svg" class="mt-2" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Create Booking</button>
        </div>
    </div>
</CascadingValue>
</form>


@if (apiResult.IsSuccess) {
    <h3 class="text-success mt-4">@apiResult.Response!.Id</h3>
}

@code {
    [Parameter] public EventCallback<IdResponse> done { get; set; }
    [Parameter] public string? @class { get; set; }

    CreateBooking request = new()
    {
        BookingStartDate = DateTime.UtcNow,
    };

    ApiResult<IdResponse> apiResult = new();

    async Task OnSubmit()
    {
        apiResult = await ApiAsync(request);

        if (apiResult.IsSuccess)
        {
            await done.InvokeAsync(apiResult.Response!);
            request = new();
        }
    }

    async Task close() => await done.InvokeAsync(null);
}
